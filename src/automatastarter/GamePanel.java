/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package automatastarter;

import java.awt.Color;
import utils.CardSwitcher;
import utils.ImageUtil;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.Timer;

/**
 *
 * @author michael.roy-diclemen
 */
public class GamePanel extends javax.swing.JPanel implements MouseListener {

    public static final String CARD_NAME = "game";

    CardSwitcher switcher; 
    //This is the parent panel
    Timer animTimer;
    //Constants for cell states
    private static final int OFF = 0;
    private static final int ON = 1;
    private static final int DYING = 2;
    // Size of each cell in the grid
    private static final int CELL_SIZE = 15; 
    
    //Grid variables
    int[][] grid;
    int rows, columns;
    
    /*
    // Image img1 = Toolkit.getDefaultToolkit().getImage("yourFile.jpg");
    BufferedImage img1;
    //variables to control your animation elements
    int x = 0;
    int y = 10;
    int xdir = 5;
    int lineX = 0;
    */
    /**
     * Creates new form GamePanel
     */
    public GamePanel(CardSwitcher p) {
        initComponents();
        //setting rows and columns
        this.rows = 40;
        this.columns = 40;

        //img1 = ImageUtil.loadAndResizeImage("yourFile.jpg", 300, 300);//, WIDTH, HEIGHT)//ImageIO.read(new File("yourFile.jpg"));

        this.setFocusable(true);

        // tell the program we want to listen to the mouse
        addMouseListener(this);
        //tells us the panel that controls this one
        switcher = p;
        //create and start a Timer for animation
        animTimer = new Timer(800, new AnimTimerTick());
        animTimer.start();
        
        //initializing the grid
        grid = SimulationEngine.initializeGrid(rows, columns);

        /* old code
        //set up the key bindings
        setupKeys();
        */

    }

    /*
    private void setupKeys() {
        //these lines map a physical key, to a name, and then a name to an 'action'.  You will change the key, name and action to suit your needs
        this.getInputMap().put(KeyStroke.getKeyStroke("LEFT"), "leftKey");
        this.getActionMap().put("leftKey", new Move("LEFT"));

        this.getInputMap().put(KeyStroke.getKeyStroke("W"), "wKey");
        this.getActionMap().put("wKey", new Move("w"));

        this.getInputMap().put(KeyStroke.getKeyStroke("D"), "dKey");
        this.getActionMap().put("dKey", new Move("d"));

        this.getInputMap().put(KeyStroke.getKeyStroke("X"), "xKey");
        this.getActionMap().put("xKey", new Move("x"));
    }
    */

    public void paintComponent(Graphics g) {
        
            // Loop through the grid and draw each cell
            for (int row = 0; row < rows; row++) {
                for (int col = 0; col < columns; col++) {
                    int x = col * CELL_SIZE;
                    int y = row * CELL_SIZE;

                    // Set color based on cell state
                    switch (grid[row][col]) {
                        case ON:
                            g.setColor(Color.GREEN);
                            break;
                        case DYING:
                            g.setColor(Color.RED);
                            break;
                        case OFF:
                        default:
                            g.setColor(Color.WHITE);
                            break;
                    }

                    // Draw the cell as a filled rectangle
                    g.fillRect(x, y, CELL_SIZE, CELL_SIZE);

                    // Draw grid lines
                    g.setColor(Color.BLACK);
                    g.drawRect(x, y, CELL_SIZE, CELL_SIZE);
                }
            }
        /*
        super.paintComponent(g);
        if (img1 != null) {
            g.drawImage(img1, x, y, this);
        }
        g.drawLine(lineX, 0, 300, 300);
        */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        NumberOfDeads = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        NumberOfDyings = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        NumberOfAlives = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Number of Deads:");

        NumberOfDeads.setText("0");

        jLabel2.setText("Number of Dyings:");

        NumberOfDyings.setText("0");

        jLabel3.setText("Number of Alives:");

        NumberOfAlives.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(672, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NumberOfDeads))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NumberOfDyings))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NumberOfAlives)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(NumberOfAlives))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(NumberOfDyings))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(NumberOfDeads))
                .addContainerGap(1100, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        //lineX = 0;
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel NumberOfAlives;
    private javax.swing.JLabel NumberOfDeads;
    private javax.swing.JLabel NumberOfDyings;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

    // Method to toggle the cell state between OFF and ON (you can modify to include DYING if needed)
    private void toggleCell(int row, int col) {
        if (grid[row][col] == OFF) {
            grid[row][col] = ON;
        } else {
            grid[row][col] = OFF;
        }
    }
    
    //updating grid
    public void update(){
       grid = SimulationEngine.applyRules(rows,columns,grid);
       //getting the counts of On, Off or dying cells, the order: aliveCount, dyingCount, deadCount]
       int[] count = SimulationEngine.getCellCounts(grid);
       
       NumberOfAlives.setText("" + count[0]);
       NumberOfDyings.setText("" + count[1]);
       NumberOfDeads.setText("" + count[2]);
    }
    
    /**
     * This event captures a click which is defined as pressing and releasing in
     * the same area
     *
     * @param me
     */
    public void mouseClicked(MouseEvent me) {
          //getting the location with regards to the cell
        int x = me.getX() / CELL_SIZE;
        int y = me.getY() / CELL_SIZE;
        //if in the grid
        if (x >= 0 && x < columns && y >= 0 && y < rows) {
            toggleCell(y, x); // Toggle cell state
            repaint();  // Repaint the panel to reflect the change
       }
    }

    /**
     * When the mountain is pressed
     *
     * @param me
     */
    public void mousePressed(MouseEvent me) {
        System.out.println("Press: " + me.getX() + ":" + me.getY());
    }

    /**
     * When the mouse button is released
     *
     * @param me
     */
    public void mouseReleased(MouseEvent me) {
        System.out.println("Release: " + me.getX() + ":" + me.getY());
    }

    /**
     * When the mouse enters the area
     *
     * @param me
     */
    public void mouseEntered(MouseEvent me) {
        System.out.println("Enter: " + me.getX() + ":" + me.getY());
    }

    /**
     * When the mouse exits the panel
     *
     * @param me
     */
    public void mouseExited(MouseEvent me) {
        System.out.println("Exit: " + me.getX() + ":" + me.getY());
    }

    /**
     * Everything inside here happens when you click on a captured key.
     */
    /*
    private class Move extends AbstractAction {

        String key;

        public Move(String akey) {
            key = akey;
        }

        public void actionPerformed(ActionEvent ae) {
            // here you decide what you want to happen if a particular key is pressed
            System.out.println("llll" + key);
            switch(key){
                case "d": x+=2; break;
                case "x": animTimer.stop(); switcher.switchToCard(EndPanel.CARD_NAME); break;
            }
            if (key.equals("d")) {
                x = x + 2;
            }
            
        }

    }
    */

    /**
     * Everything inside this actionPerformed will happen every time the
     * animation timer clicks.
     */
    private class AnimTimerTick implements ActionListener {
        //using timer
        public void actionPerformed(ActionEvent ae) {
            //updating the grid
            update();
            //force redraw
            repaint();
        }
    }
}
